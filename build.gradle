group 'SuperiorSkyblock'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'base'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

version = "1.5.1"

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/public-libs/' }
    }

    shadowJar {
        archiveName = "${project.name}.jar"
        destinationDir = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

repositories {
    maven { url 'https://repo.bg-software.com/repository/nms/' }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/public-libs/' }
}

dependencies {
    compile fileTree("archive")

    compileOnly "org.spigotmc:v1_8_R3:latest"
    compileOnly 'com.bgsoftware:SuperiorSkyblockAPI:latest'
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }

    processResources {
        outputs.upToDateWhen {false}
        eachFile { details ->
            if (details.name.contentEquals('plugin.yml')) {
                filter { String line ->
                    line.replace('${project.version}', version)
                }
            }
        }
    }

}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + ".jar"
    }
    else{
        archiveName = rootProject.name + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

build {
    dependsOn shadowJar
    dependsOn publish
}
publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build

publishing {
    repositories {
        mavenLocal()
    }
}